@model Modelo.Cadastros.Fabricante

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Detalhes de FABRICANTE";
}

<div class="panel panel-primary">
    <div class="panel-heading">
        Detalhes de um FABRICANTE
    </div>
    <div class="panel-body">
        <div class="form-group">
            @Html.LabelFor(model => model.Nome)
            <br />
            <div class="input-group">
                <span class="input-group-addon">
                    <i class="glyphicon glyphicon-globe"></i>
                </span>
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </div>
        </div>
    </div>
    <div class="panel-footer panel-info">
        @Html.ActionLink("Alterar", "Edit", new { id = Model.FabricanteId }, new { @class = "btn btn-info" })
        @Html.ActionLink("Voltar a listagem", "Index", null, new { @class = "btn btn-info" })
    </div>
</div>

 <!-- Utilização do  Partial Views _PorFabricante.cshtml  Com isso, cria-se uma visão master-detail entre Fabricante e Produtos-->
@Html.Partial("~/Views/Produtos/_PorFabricante.cshtml",Model.Produtos.ToList())

@section ScriptPage {
    <script src="~/Scripts/jquery.validate.min.js">
    </script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js">
    </script>
    <script type="text/javascript">

        //primeira instrução, que requisita o método removeClass(), removerá a classe active de todo elemento<li> .
        //Já a segunda instrução, por estar usando um elementonomeado (veja o # antes do nome liFabricantes ),
        //adicionará a classe active ao elemento liFabricantes .
        $(document).ready(function () {
            $('li').removeClass("active");
            $('#liFabricantes').addClass("active");
        });
    </script>
}